package broker

import (
	"context"
	"errors"
	"testing"

	"github.com/msales/pkg/v3/log"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestSubscriber_applyAction(t *testing.T) {
	message := &msgMock{}

	ctx := context.Background()

	s := NewSubscriber(ctx, nil, &performerMock{})
	assert.NotPanics(t, func() {
		s.applyAction(nil, message)
	})
}

func TestSubscriber_applyAction_wrongJson(t *testing.T) {
	message := &wrongMsgMock{}

	ctx := context.Background()

	s := NewSubscriber(ctx, nil, &performerMock{})
	assert.NotPanics(t, func() {
		s.applyAction(nil, message)
	})
}

func TestSubscriber_applyAction_performerError(t *testing.T) {
	message := &msgMock{}

	l := new(Logger)

	ctx := context.Background()
	ctx = log.WithLogger(ctx, l)
	l.On("Error", "Cannot perform action: test error")

	s := NewSubscriber(ctx, nil, &erroredPerformerMock{})
	assert.NotPanics(t, func() {
		s.applyAction(nil, message)
	})
}

// helpers
type msgMock struct {
}

func (m msgMock) Duplicate() bool {
	panic("implement me")
}

func (m msgMock) Qos() byte {
	panic("implement me")
}

func (m msgMock) Retained() bool {
	panic("implement me")
}

func (m msgMock) Topic() string {
	panic("implement me")
}

func (m msgMock) MessageID() uint16 {
	panic("implement me")
}

func (m msgMock) Payload() []byte {
	return []byte(`[{"name":"foo","value":10},{"name":"bar","value":0}]`)
}

func (m msgMock) Ack() {

}

type performerMock struct {
}

func (p *performerMock) MakeActions(actions Actions) error {
	return nil
}

type wrongMsgMock struct {
}

func (w *wrongMsgMock) Duplicate() bool {
	panic("implement me")
}

func (w *wrongMsgMock) Qos() byte {
	panic("implement me")
}

func (w *wrongMsgMock) Retained() bool {
	panic("implement me")
}

func (w *wrongMsgMock) Topic() string {
	panic("implement me")
}

func (w *wrongMsgMock) MessageID() uint16 {
	panic("implement me")
}

func (w *wrongMsgMock) Payload() []byte {
	return []byte("not a json")
}

func (w *wrongMsgMock) Ack() {
	return
}

type erroredPerformerMock struct {
}

func (e *erroredPerformerMock) MakeActions(actions Actions) error {
	return errors.New("test error")
}

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, ctx
func (_m *Logger) Debug(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: msg, ctx
func (_m *Logger) Error(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: msg, ctx
func (_m *Logger) Info(msg string, ctx ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, ctx...)
	_m.Called(_ca...)
}
